
smart home project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cc6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008a  00800060  00000cc6  00000d5a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  008000ea  008000ea  00000de4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000de4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000268  00000000  00000000  00000e50  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240e  00000000  00000000  000010b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001037  00000000  00000000  000034c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015e6  00000000  00000000  000044fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004e8  00000000  00000000  00005ae4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000097d  00000000  00000000  00005fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001748  00000000  00000000  00006949  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  00008091  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__ctors_end>
   4:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
   8:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
   c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  10:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  14:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  18:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  1c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  20:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  24:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__vector_9>
  28:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  2c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  30:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  34:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  38:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  3c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  40:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  44:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  48:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  4c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  50:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  54:	c1 03       	fmuls	r20, r17
  56:	da 03       	fmulsu	r21, r18
  58:	f3 03       	fmuls	r23, r19
  5a:	0c 04       	cpc	r0, r12
  5c:	24 04       	cpc	r2, r4
  5e:	24 04       	cpc	r2, r4
  60:	24 04       	cpc	r2, r4
  62:	24 04       	cpc	r2, r4
  64:	24 04       	cpc	r2, r4
  66:	24 04       	cpc	r2, r4
  68:	24 04       	cpc	r2, r4
  6a:	24 04       	cpc	r2, r4
  6c:	24 04       	cpc	r2, r4
  6e:	24 04       	cpc	r2, r4
  70:	24 04       	cpc	r2, r4
  72:	24 04       	cpc	r2, r4
  74:	24 04       	cpc	r2, r4
  76:	24 04       	cpc	r2, r4
  78:	24 04       	cpc	r2, r4
  7a:	24 04       	cpc	r2, r4
  7c:	24 04       	cpc	r2, r4
  7e:	24 04       	cpc	r2, r4
  80:	24 04       	cpc	r2, r4
  82:	24 04       	cpc	r2, r4
  84:	24 04       	cpc	r2, r4
  86:	24 04       	cpc	r2, r4
  88:	24 04       	cpc	r2, r4
  8a:	24 04       	cpc	r2, r4
  8c:	24 04       	cpc	r2, r4
  8e:	24 04       	cpc	r2, r4
  90:	24 04       	cpc	r2, r4
  92:	24 04       	cpc	r2, r4
  94:	c1 03       	fmuls	r20, r17
  96:	da 03       	fmulsu	r21, r18
  98:	f3 03       	fmuls	r23, r19
  9a:	0c 04       	cpc	r0, r12
  9c:	31 04       	cpc	r3, r1
  9e:	4a 04       	cpc	r4, r10
  a0:	63 04       	cpc	r6, r3
  a2:	7c 04       	cpc	r7, r12
  a4:	94 04       	cpc	r9, r4
  a6:	94 04       	cpc	r9, r4
  a8:	94 04       	cpc	r9, r4
  aa:	94 04       	cpc	r9, r4
  ac:	94 04       	cpc	r9, r4
  ae:	94 04       	cpc	r9, r4
  b0:	94 04       	cpc	r9, r4
  b2:	94 04       	cpc	r9, r4
  b4:	94 04       	cpc	r9, r4
  b6:	94 04       	cpc	r9, r4
  b8:	94 04       	cpc	r9, r4
  ba:	94 04       	cpc	r9, r4
  bc:	94 04       	cpc	r9, r4
  be:	94 04       	cpc	r9, r4
  c0:	94 04       	cpc	r9, r4
  c2:	94 04       	cpc	r9, r4
  c4:	94 04       	cpc	r9, r4
  c6:	94 04       	cpc	r9, r4
  c8:	94 04       	cpc	r9, r4
  ca:	94 04       	cpc	r9, r4
  cc:	94 04       	cpc	r9, r4
  ce:	94 04       	cpc	r9, r4
  d0:	94 04       	cpc	r9, r4
  d2:	94 04       	cpc	r9, r4
  d4:	94 04       	cpc	r9, r4
  d6:	94 04       	cpc	r9, r4
  d8:	94 04       	cpc	r9, r4
  da:	94 04       	cpc	r9, r4
  dc:	31 04       	cpc	r3, r1
  de:	4a 04       	cpc	r4, r10
  e0:	63 04       	cpc	r6, r3
  e2:	7c 04       	cpc	r7, r12
  e4:	a0 04       	cpc	r10, r0
  e6:	aa 04       	cpc	r10, r10
  e8:	b4 04       	cpc	r11, r4
  ea:	be 04       	cpc	r11, r14
  ec:	c7 04       	cpc	r12, r7
  ee:	c7 04       	cpc	r12, r7
  f0:	c7 04       	cpc	r12, r7
  f2:	c7 04       	cpc	r12, r7
  f4:	c7 04       	cpc	r12, r7
  f6:	c7 04       	cpc	r12, r7
  f8:	c7 04       	cpc	r12, r7
  fa:	c7 04       	cpc	r12, r7
  fc:	c7 04       	cpc	r12, r7
  fe:	c7 04       	cpc	r12, r7
 100:	c7 04       	cpc	r12, r7
 102:	c7 04       	cpc	r12, r7
 104:	c7 04       	cpc	r12, r7
 106:	c7 04       	cpc	r12, r7
 108:	c7 04       	cpc	r12, r7
 10a:	c7 04       	cpc	r12, r7
 10c:	c7 04       	cpc	r12, r7
 10e:	c7 04       	cpc	r12, r7
 110:	c7 04       	cpc	r12, r7
 112:	c7 04       	cpc	r12, r7
 114:	c7 04       	cpc	r12, r7
 116:	c7 04       	cpc	r12, r7
 118:	c7 04       	cpc	r12, r7
 11a:	c7 04       	cpc	r12, r7
 11c:	c7 04       	cpc	r12, r7
 11e:	c7 04       	cpc	r12, r7
 120:	c7 04       	cpc	r12, r7
 122:	c7 04       	cpc	r12, r7
 124:	a0 04       	cpc	r10, r0
 126:	aa 04       	cpc	r10, r10
 128:	b4 04       	cpc	r11, r4
 12a:	be 04       	cpc	r11, r14
 12c:	d4 04       	cpc	r13, r4
 12e:	dd 04       	cpc	r13, r13
 130:	e6 04       	cpc	r14, r6
 132:	ef 04       	cpc	r14, r15
 134:	f7 04       	cpc	r15, r7
 136:	f7 04       	cpc	r15, r7
 138:	f7 04       	cpc	r15, r7
 13a:	f7 04       	cpc	r15, r7
 13c:	f7 04       	cpc	r15, r7
 13e:	f7 04       	cpc	r15, r7
 140:	f7 04       	cpc	r15, r7
 142:	f7 04       	cpc	r15, r7
 144:	f7 04       	cpc	r15, r7
 146:	f7 04       	cpc	r15, r7
 148:	f7 04       	cpc	r15, r7
 14a:	f7 04       	cpc	r15, r7
 14c:	f7 04       	cpc	r15, r7
 14e:	f7 04       	cpc	r15, r7
 150:	f7 04       	cpc	r15, r7
 152:	f7 04       	cpc	r15, r7
 154:	f7 04       	cpc	r15, r7
 156:	f7 04       	cpc	r15, r7
 158:	f7 04       	cpc	r15, r7
 15a:	f7 04       	cpc	r15, r7
 15c:	f7 04       	cpc	r15, r7
 15e:	f7 04       	cpc	r15, r7
 160:	f7 04       	cpc	r15, r7
 162:	f7 04       	cpc	r15, r7
 164:	f7 04       	cpc	r15, r7
 166:	f7 04       	cpc	r15, r7
 168:	f7 04       	cpc	r15, r7
 16a:	f7 04       	cpc	r15, r7
 16c:	d4 04       	cpc	r13, r4
 16e:	dd 04       	cpc	r13, r13
 170:	e6 04       	cpc	r14, r6
 172:	ef 04       	cpc	r14, r15
 174:	03 05       	cpc	r16, r3
 176:	0d 05       	cpc	r16, r13
 178:	17 05       	cpc	r17, r7
 17a:	21 05       	cpc	r18, r1
 17c:	2a 05       	cpc	r18, r10
 17e:	2a 05       	cpc	r18, r10
 180:	2a 05       	cpc	r18, r10
 182:	2a 05       	cpc	r18, r10
 184:	2a 05       	cpc	r18, r10
 186:	2a 05       	cpc	r18, r10
 188:	2a 05       	cpc	r18, r10
 18a:	2a 05       	cpc	r18, r10
 18c:	2a 05       	cpc	r18, r10
 18e:	2a 05       	cpc	r18, r10
 190:	2a 05       	cpc	r18, r10
 192:	2a 05       	cpc	r18, r10
 194:	2a 05       	cpc	r18, r10
 196:	2a 05       	cpc	r18, r10
 198:	2a 05       	cpc	r18, r10
 19a:	2a 05       	cpc	r18, r10
 19c:	2a 05       	cpc	r18, r10
 19e:	2a 05       	cpc	r18, r10
 1a0:	2a 05       	cpc	r18, r10
 1a2:	2a 05       	cpc	r18, r10
 1a4:	2a 05       	cpc	r18, r10
 1a6:	2a 05       	cpc	r18, r10
 1a8:	2a 05       	cpc	r18, r10
 1aa:	2a 05       	cpc	r18, r10
 1ac:	2a 05       	cpc	r18, r10
 1ae:	2a 05       	cpc	r18, r10
 1b0:	2a 05       	cpc	r18, r10
 1b2:	2a 05       	cpc	r18, r10
 1b4:	03 05       	cpc	r16, r3
 1b6:	0d 05       	cpc	r16, r13
 1b8:	17 05       	cpc	r17, r7
 1ba:	21 05       	cpc	r18, r1
 1bc:	36 05       	cpc	r19, r6
 1be:	40 05       	cpc	r20, r0
 1c0:	4a 05       	cpc	r20, r10
 1c2:	54 05       	cpc	r21, r4
 1c4:	5d 05       	cpc	r21, r13
 1c6:	5d 05       	cpc	r21, r13
 1c8:	5d 05       	cpc	r21, r13
 1ca:	5d 05       	cpc	r21, r13
 1cc:	5d 05       	cpc	r21, r13
 1ce:	5d 05       	cpc	r21, r13
 1d0:	5d 05       	cpc	r21, r13
 1d2:	5d 05       	cpc	r21, r13
 1d4:	5d 05       	cpc	r21, r13
 1d6:	5d 05       	cpc	r21, r13
 1d8:	5d 05       	cpc	r21, r13
 1da:	5d 05       	cpc	r21, r13
 1dc:	5d 05       	cpc	r21, r13
 1de:	5d 05       	cpc	r21, r13
 1e0:	5d 05       	cpc	r21, r13
 1e2:	5d 05       	cpc	r21, r13
 1e4:	5d 05       	cpc	r21, r13
 1e6:	5d 05       	cpc	r21, r13
 1e8:	5d 05       	cpc	r21, r13
 1ea:	5d 05       	cpc	r21, r13
 1ec:	5d 05       	cpc	r21, r13
 1ee:	5d 05       	cpc	r21, r13
 1f0:	5d 05       	cpc	r21, r13
 1f2:	5d 05       	cpc	r21, r13
 1f4:	5d 05       	cpc	r21, r13
 1f6:	5d 05       	cpc	r21, r13
 1f8:	5d 05       	cpc	r21, r13
 1fa:	5d 05       	cpc	r21, r13
 1fc:	36 05       	cpc	r19, r6
 1fe:	40 05       	cpc	r20, r0
 200:	4a 05       	cpc	r20, r10
 202:	54 05       	cpc	r21, r4
 204:	69 05       	cpc	r22, r9
 206:	70 05       	cpc	r23, r0
 208:	77 05       	cpc	r23, r7
 20a:	7e 05       	cpc	r23, r14
 20c:	84 05       	cpc	r24, r4
 20e:	84 05       	cpc	r24, r4
 210:	84 05       	cpc	r24, r4
 212:	84 05       	cpc	r24, r4
 214:	84 05       	cpc	r24, r4
 216:	84 05       	cpc	r24, r4
 218:	84 05       	cpc	r24, r4
 21a:	84 05       	cpc	r24, r4
 21c:	84 05       	cpc	r24, r4
 21e:	84 05       	cpc	r24, r4
 220:	84 05       	cpc	r24, r4
 222:	84 05       	cpc	r24, r4
 224:	84 05       	cpc	r24, r4
 226:	84 05       	cpc	r24, r4
 228:	84 05       	cpc	r24, r4
 22a:	84 05       	cpc	r24, r4
 22c:	84 05       	cpc	r24, r4
 22e:	84 05       	cpc	r24, r4
 230:	84 05       	cpc	r24, r4
 232:	84 05       	cpc	r24, r4
 234:	84 05       	cpc	r24, r4
 236:	84 05       	cpc	r24, r4
 238:	84 05       	cpc	r24, r4
 23a:	84 05       	cpc	r24, r4
 23c:	84 05       	cpc	r24, r4
 23e:	84 05       	cpc	r24, r4
 240:	84 05       	cpc	r24, r4
 242:	84 05       	cpc	r24, r4
 244:	69 05       	cpc	r22, r9
 246:	70 05       	cpc	r23, r0
 248:	77 05       	cpc	r23, r7
 24a:	7e 05       	cpc	r23, r14

0000024c <__ctors_end>:
 24c:	11 24       	eor	r1, r1
 24e:	1f be       	out	0x3f, r1	; 63
 250:	cf e5       	ldi	r28, 0x5F	; 95
 252:	d8 e0       	ldi	r29, 0x08	; 8
 254:	de bf       	out	0x3e, r29	; 62
 256:	cd bf       	out	0x3d, r28	; 61

00000258 <__do_copy_data>:
 258:	10 e0       	ldi	r17, 0x00	; 0
 25a:	a0 e6       	ldi	r26, 0x60	; 96
 25c:	b0 e0       	ldi	r27, 0x00	; 0
 25e:	e6 ec       	ldi	r30, 0xC6	; 198
 260:	fc e0       	ldi	r31, 0x0C	; 12
 262:	02 c0       	rjmp	.+4      	; 0x268 <__do_copy_data+0x10>
 264:	05 90       	lpm	r0, Z+
 266:	0d 92       	st	X+, r0
 268:	aa 3e       	cpi	r26, 0xEA	; 234
 26a:	b1 07       	cpc	r27, r17
 26c:	d9 f7       	brne	.-10     	; 0x264 <__do_copy_data+0xc>

0000026e <__do_clear_bss>:
 26e:	20 e0       	ldi	r18, 0x00	; 0
 270:	aa ee       	ldi	r26, 0xEA	; 234
 272:	b0 e0       	ldi	r27, 0x00	; 0
 274:	01 c0       	rjmp	.+2      	; 0x278 <.do_clear_bss_start>

00000276 <.do_clear_bss_loop>:
 276:	1d 92       	st	X+, r1

00000278 <.do_clear_bss_start>:
 278:	af 3e       	cpi	r26, 0xEF	; 239
 27a:	b2 07       	cpc	r27, r18
 27c:	e1 f7       	brne	.-8      	; 0x276 <.do_clear_bss_loop>
 27e:	0e 94 bf 02 	call	0x57e	; 0x57e <main>
 282:	0c 94 61 06 	jmp	0xcc2	; 0xcc2 <_exit>

00000286 <__bad_interrupt>:
 286:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000028a <KP_init>:
uint8 keys[ROWS][COLUMNS]={{1,2,3},{4,5,6},{7,8,9},{'*',0,'#'}};

void KP_init()
{
	/***port initialization***/
	DIO_SetLowNibDir(KP_PORT,OUT);
 28a:	61 e0       	ldi	r22, 0x01	; 1
 28c:	83 e4       	ldi	r24, 0x43	; 67
 28e:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <DIO_SetLowNibDir>
	DIO_SetHighNibDir(KP_PORT,IN);
 292:	60 e0       	ldi	r22, 0x00	; 0
 294:	83 e4       	ldi	r24, 0x43	; 67
 296:	0e 94 2b 05 	call	0xa56	; 0xa56 <DIO_SetHighNibDir>
	
	/***activate pull up resistance***/
	DIO_WritePortLvl(KP_PORT,HIGH);
 29a:	61 e0       	ldi	r22, 0x01	; 1
 29c:	83 e4       	ldi	r24, 0x43	; 67
 29e:	0e 94 c9 04 	call	0x992	; 0x992 <DIO_WritePortLvl>
 2a2:	08 95       	ret

000002a4 <KP_Get_Key>:
}

uint8 KP_Get_Key()
{
 2a4:	ef 92       	push	r14
 2a6:	ff 92       	push	r15
 2a8:	1f 93       	push	r17
 2aa:	cf 93       	push	r28
 2ac:	df 93       	push	r29
 2ae:	1f 92       	push	r1
 2b0:	cd b7       	in	r28, 0x3d	; 61
 2b2:	de b7       	in	r29, 0x3e	; 62
	volatile uint8 key = ' ';
 2b4:	80 e2       	ldi	r24, 0x20	; 32
 2b6:	89 83       	std	Y+1, r24	; 0x01
 2b8:	e1 2c       	mov	r14, r1
 2ba:	f1 2c       	mov	r15, r1
	uint8 row,col;
	/***loop the output on rows***/
	for(row=0;row<ROWS;row++)
	{
		DIO_WritePortLvl(KP_PORT,HIGH);
 2bc:	61 e0       	ldi	r22, 0x01	; 1
 2be:	83 e4       	ldi	r24, 0x43	; 67
 2c0:	0e 94 c9 04 	call	0x992	; 0x992 <DIO_WritePortLvl>
		DIO_WritePin(KP_PORT,row,LOW);
 2c4:	40 e0       	ldi	r20, 0x00	; 0
 2c6:	6e 2d       	mov	r22, r14
 2c8:	83 e4       	ldi	r24, 0x43	; 67
 2ca:	0e 94 25 04 	call	0x84a	; 0x84a <DIO_WritePin>
		/***loop reading the input on rows***/
		for(col=0;col<COLUMNS;col++)
 2ce:	10 e0       	ldi	r17, 0x00	; 0
		{
			if(DIO_ReadPin(KP_PORT,(col+ROWS)) == LOW)
 2d0:	64 e0       	ldi	r22, 0x04	; 4
 2d2:	61 0f       	add	r22, r17
 2d4:	83 e4       	ldi	r24, 0x43	; 67
 2d6:	0e 94 95 04 	call	0x92a	; 0x92a <DIO_ReadPin>
 2da:	81 11       	cpse	r24, r1
 2dc:	12 c0       	rjmp	.+36     	; 0x302 <KP_Get_Key+0x5e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2de:	87 e8       	ldi	r24, 0x87	; 135
 2e0:	93 e1       	ldi	r25, 0x13	; 19
 2e2:	01 97       	sbiw	r24, 0x01	; 1
 2e4:	f1 f7       	brne	.-4      	; 0x2e2 <KP_Get_Key+0x3e>
 2e6:	00 c0       	rjmp	.+0      	; 0x2e8 <KP_Get_Key+0x44>
 2e8:	00 00       	nop
			{
				_delay_ms(20);
				key=keys[row][col];
 2ea:	f7 01       	movw	r30, r14
 2ec:	ee 0f       	add	r30, r30
 2ee:	ff 1f       	adc	r31, r31
 2f0:	ee 0d       	add	r30, r14
 2f2:	ff 1d       	adc	r31, r15
 2f4:	e0 5a       	subi	r30, 0xA0	; 160
 2f6:	ff 4f       	sbci	r31, 0xFF	; 255
 2f8:	e1 0f       	add	r30, r17
 2fa:	f1 1d       	adc	r31, r1
 2fc:	80 81       	ld	r24, Z
 2fe:	89 83       	std	Y+1, r24	; 0x01
				break;
 300:	03 c0       	rjmp	.+6      	; 0x308 <KP_Get_Key+0x64>
	for(row=0;row<ROWS;row++)
	{
		DIO_WritePortLvl(KP_PORT,HIGH);
		DIO_WritePin(KP_PORT,row,LOW);
		/***loop reading the input on rows***/
		for(col=0;col<COLUMNS;col++)
 302:	1f 5f       	subi	r17, 0xFF	; 255
 304:	13 30       	cpi	r17, 0x03	; 3
 306:	21 f7       	brne	.-56     	; 0x2d0 <KP_Get_Key+0x2c>
 308:	9f ef       	ldi	r25, 0xFF	; 255
 30a:	e9 1a       	sub	r14, r25
 30c:	f9 0a       	sbc	r15, r25
uint8 KP_Get_Key()
{
	volatile uint8 key = ' ';
	uint8 row,col;
	/***loop the output on rows***/
	for(row=0;row<ROWS;row++)
 30e:	84 e0       	ldi	r24, 0x04	; 4
 310:	e8 16       	cp	r14, r24
 312:	f1 04       	cpc	r15, r1
 314:	99 f6       	brne	.-90     	; 0x2bc <KP_Get_Key+0x18>
				key=keys[row][col];
				break;
			}
		}
	}
	return key;
 316:	89 81       	ldd	r24, Y+1	; 0x01
 318:	0f 90       	pop	r0
 31a:	df 91       	pop	r29
 31c:	cf 91       	pop	r28
 31e:	1f 91       	pop	r17
 320:	ff 90       	pop	r15
 322:	ef 90       	pop	r14
 324:	08 95       	ret

00000326 <LCD_Enable>:
	{
		integrFrac /= 10;
	}
	//uint16 integrFrac = fraction * 1000;
	LCD_SendNumber(integrFrac);
}
 326:	41 e0       	ldi	r20, 0x01	; 1
 328:	63 e0       	ldi	r22, 0x03	; 3
 32a:	82 e4       	ldi	r24, 0x42	; 66
 32c:	0e 94 25 04 	call	0x84a	; 0x84a <DIO_WritePin>
 330:	83 e0       	ldi	r24, 0x03	; 3
 332:	8a 95       	dec	r24
 334:	f1 f7       	brne	.-4      	; 0x332 <LCD_Enable+0xc>
 336:	00 00       	nop
 338:	40 e0       	ldi	r20, 0x00	; 0
 33a:	63 e0       	ldi	r22, 0x03	; 3
 33c:	82 e4       	ldi	r24, 0x42	; 66
 33e:	0e 94 25 04 	call	0x84a	; 0x84a <DIO_WritePin>
 342:	08 95       	ret

00000344 <LCD_SendCommand>:
 344:	cf 93       	push	r28
 346:	c8 2f       	mov	r28, r24
 348:	40 e0       	ldi	r20, 0x00	; 0
 34a:	61 e0       	ldi	r22, 0x01	; 1
 34c:	82 e4       	ldi	r24, 0x42	; 66
 34e:	0e 94 25 04 	call	0x84a	; 0x84a <DIO_WritePin>
 352:	40 e0       	ldi	r20, 0x00	; 0
 354:	62 e0       	ldi	r22, 0x02	; 2
 356:	82 e4       	ldi	r24, 0x42	; 66
 358:	0e 94 25 04 	call	0x84a	; 0x84a <DIO_WritePin>
 35c:	6c 2f       	mov	r22, r28
 35e:	81 e4       	ldi	r24, 0x41	; 65
 360:	0e 94 5e 05 	call	0xabc	; 0xabc <DIO_WriteHighNibVal>
 364:	0e 94 93 01 	call	0x326	; 0x326 <LCD_Enable>
 368:	6c 2f       	mov	r22, r28
 36a:	62 95       	swap	r22
 36c:	60 7f       	andi	r22, 0xF0	; 240
 36e:	81 e4       	ldi	r24, 0x41	; 65
 370:	0e 94 5e 05 	call	0xabc	; 0xabc <DIO_WriteHighNibVal>
 374:	0e 94 93 01 	call	0x326	; 0x326 <LCD_Enable>
 378:	81 ee       	ldi	r24, 0xE1	; 225
 37a:	94 e0       	ldi	r25, 0x04	; 4
 37c:	01 97       	sbiw	r24, 0x01	; 1
 37e:	f1 f7       	brne	.-4      	; 0x37c <LCD_SendCommand+0x38>
 380:	00 c0       	rjmp	.+0      	; 0x382 <LCD_SendCommand+0x3e>
 382:	00 00       	nop
 384:	cf 91       	pop	r28
 386:	08 95       	ret

00000388 <LCD_init>:
 388:	61 e0       	ldi	r22, 0x01	; 1
 38a:	81 e4       	ldi	r24, 0x41	; 65
 38c:	0e 94 2b 05 	call	0xa56	; 0xa56 <DIO_SetHighNibDir>
 390:	41 e0       	ldi	r20, 0x01	; 1
 392:	61 e0       	ldi	r22, 0x01	; 1
 394:	82 e4       	ldi	r24, 0x42	; 66
 396:	0e 94 b5 03 	call	0x76a	; 0x76a <DIO_SetPinDir>
 39a:	41 e0       	ldi	r20, 0x01	; 1
 39c:	62 e0       	ldi	r22, 0x02	; 2
 39e:	82 e4       	ldi	r24, 0x42	; 66
 3a0:	0e 94 b5 03 	call	0x76a	; 0x76a <DIO_SetPinDir>
 3a4:	41 e0       	ldi	r20, 0x01	; 1
 3a6:	63 e0       	ldi	r22, 0x03	; 3
 3a8:	82 e4       	ldi	r24, 0x42	; 66
 3aa:	0e 94 b5 03 	call	0x76a	; 0x76a <DIO_SetPinDir>
 3ae:	85 ea       	ldi	r24, 0xA5	; 165
 3b0:	9e e0       	ldi	r25, 0x0E	; 14
 3b2:	01 97       	sbiw	r24, 0x01	; 1
 3b4:	f1 f7       	brne	.-4      	; 0x3b2 <LCD_init+0x2a>
 3b6:	00 c0       	rjmp	.+0      	; 0x3b8 <LCD_init+0x30>
 3b8:	00 00       	nop
 3ba:	83 e3       	ldi	r24, 0x33	; 51
 3bc:	0e 94 a2 01 	call	0x344	; 0x344 <LCD_SendCommand>
 3c0:	82 e3       	ldi	r24, 0x32	; 50
 3c2:	0e 94 a2 01 	call	0x344	; 0x344 <LCD_SendCommand>
 3c6:	88 e2       	ldi	r24, 0x28	; 40
 3c8:	0e 94 a2 01 	call	0x344	; 0x344 <LCD_SendCommand>
 3cc:	8c e0       	ldi	r24, 0x0C	; 12
 3ce:	0e 94 a2 01 	call	0x344	; 0x344 <LCD_SendCommand>
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	0e 94 a2 01 	call	0x344	; 0x344 <LCD_SendCommand>
 3d8:	86 e0       	ldi	r24, 0x06	; 6
 3da:	0e 94 a2 01 	call	0x344	; 0x344 <LCD_SendCommand>
 3de:	08 95       	ret

000003e0 <LCD_ClrScreen>:
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	0e 94 a2 01 	call	0x344	; 0x344 <LCD_SendCommand>
 3e6:	08 95       	ret

000003e8 <LCD_SendChar>:
 3e8:	cf 93       	push	r28
 3ea:	c8 2f       	mov	r28, r24
 3ec:	41 e0       	ldi	r20, 0x01	; 1
 3ee:	61 e0       	ldi	r22, 0x01	; 1
 3f0:	82 e4       	ldi	r24, 0x42	; 66
 3f2:	0e 94 25 04 	call	0x84a	; 0x84a <DIO_WritePin>
 3f6:	40 e0       	ldi	r20, 0x00	; 0
 3f8:	62 e0       	ldi	r22, 0x02	; 2
 3fa:	82 e4       	ldi	r24, 0x42	; 66
 3fc:	0e 94 25 04 	call	0x84a	; 0x84a <DIO_WritePin>
 400:	6c 2f       	mov	r22, r28
 402:	81 e4       	ldi	r24, 0x41	; 65
 404:	0e 94 5e 05 	call	0xabc	; 0xabc <DIO_WriteHighNibVal>
 408:	0e 94 93 01 	call	0x326	; 0x326 <LCD_Enable>
 40c:	6c 2f       	mov	r22, r28
 40e:	62 95       	swap	r22
 410:	60 7f       	andi	r22, 0xF0	; 240
 412:	81 e4       	ldi	r24, 0x41	; 65
 414:	0e 94 5e 05 	call	0xabc	; 0xabc <DIO_WriteHighNibVal>
 418:	0e 94 93 01 	call	0x326	; 0x326 <LCD_Enable>
 41c:	81 ee       	ldi	r24, 0xE1	; 225
 41e:	94 e0       	ldi	r25, 0x04	; 4
 420:	01 97       	sbiw	r24, 0x01	; 1
 422:	f1 f7       	brne	.-4      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 424:	00 c0       	rjmp	.+0      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 426:	00 00       	nop
 428:	cf 91       	pop	r28
 42a:	08 95       	ret

0000042c <LCD_SendString>:
 42c:	0f 93       	push	r16
 42e:	1f 93       	push	r17
 430:	cf 93       	push	r28
 432:	fc 01       	movw	r30, r24
 434:	80 81       	ld	r24, Z
 436:	88 23       	and	r24, r24
 438:	59 f0       	breq	.+22     	; 0x450 <LCD_SendString+0x24>
 43a:	8f 01       	movw	r16, r30
 43c:	c0 e0       	ldi	r28, 0x00	; 0
 43e:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <LCD_SendChar>
 442:	cf 5f       	subi	r28, 0xFF	; 255
 444:	f8 01       	movw	r30, r16
 446:	ec 0f       	add	r30, r28
 448:	f1 1d       	adc	r31, r1
 44a:	80 81       	ld	r24, Z
 44c:	81 11       	cpse	r24, r1
 44e:	f7 cf       	rjmp	.-18     	; 0x43e <LCD_SendString+0x12>
 450:	cf 91       	pop	r28
 452:	1f 91       	pop	r17
 454:	0f 91       	pop	r16
 456:	08 95       	ret

00000458 <LCD_SendNumber>:
 458:	0f 93       	push	r16
 45a:	1f 93       	push	r17
 45c:	cf 93       	push	r28
 45e:	df 93       	push	r29
 460:	cd b7       	in	r28, 0x3d	; 61
 462:	de b7       	in	r29, 0x3e	; 62
 464:	aa 97       	sbiw	r28, 0x2a	; 42
 466:	0f b6       	in	r0, 0x3f	; 63
 468:	f8 94       	cli
 46a:	de bf       	out	0x3e, r29	; 62
 46c:	0f be       	out	0x3f, r0	; 63
 46e:	cd bf       	out	0x3d, r28	; 61
 470:	8c 01       	movw	r16, r24
 472:	8a e0       	ldi	r24, 0x0A	; 10
 474:	ec e6       	ldi	r30, 0x6C	; 108
 476:	f0 e0       	ldi	r31, 0x00	; 0
 478:	de 01       	movw	r26, r28
 47a:	11 96       	adiw	r26, 0x01	; 1
 47c:	01 90       	ld	r0, Z+
 47e:	0d 92       	st	X+, r0
 480:	8a 95       	dec	r24
 482:	e1 f7       	brne	.-8      	; 0x47c <LCD_SendNumber+0x24>
 484:	01 15       	cp	r16, r1
 486:	11 05       	cpc	r17, r1
 488:	39 f4       	brne	.+14     	; 0x498 <LCD_SendNumber+0x40>
 48a:	80 e3       	ldi	r24, 0x30	; 48
 48c:	8b 8f       	std	Y+27, r24	; 0x1b
 48e:	1c 86       	std	Y+12, r1	; 0x0c
 490:	e1 e0       	ldi	r30, 0x01	; 1
 492:	f0 e0       	ldi	r31, 0x00	; 0
 494:	41 e0       	ldi	r20, 0x01	; 1
 496:	41 c0       	rjmp	.+130    	; 0x51a <LCD_SendNumber+0xc2>
 498:	40 e0       	ldi	r20, 0x00	; 0
 49a:	eb e1       	ldi	r30, 0x1B	; 27
 49c:	f0 e0       	ldi	r31, 0x00	; 0
 49e:	ec 0f       	add	r30, r28
 4a0:	fd 1f       	adc	r31, r29
 4a2:	e4 0f       	add	r30, r20
 4a4:	f1 1d       	adc	r31, r1
 4a6:	98 01       	movw	r18, r16
 4a8:	ad ec       	ldi	r26, 0xCD	; 205
 4aa:	bc ec       	ldi	r27, 0xCC	; 204
 4ac:	0e 94 52 06 	call	0xca4	; 0xca4 <__umulhisi3>
 4b0:	96 95       	lsr	r25
 4b2:	87 95       	ror	r24
 4b4:	96 95       	lsr	r25
 4b6:	87 95       	ror	r24
 4b8:	96 95       	lsr	r25
 4ba:	87 95       	ror	r24
 4bc:	9c 01       	movw	r18, r24
 4be:	22 0f       	add	r18, r18
 4c0:	33 1f       	adc	r19, r19
 4c2:	88 0f       	add	r24, r24
 4c4:	99 1f       	adc	r25, r25
 4c6:	88 0f       	add	r24, r24
 4c8:	99 1f       	adc	r25, r25
 4ca:	88 0f       	add	r24, r24
 4cc:	99 1f       	adc	r25, r25
 4ce:	82 0f       	add	r24, r18
 4d0:	93 1f       	adc	r25, r19
 4d2:	98 01       	movw	r18, r16
 4d4:	28 1b       	sub	r18, r24
 4d6:	39 0b       	sbc	r19, r25
 4d8:	a1 e0       	ldi	r26, 0x01	; 1
 4da:	b0 e0       	ldi	r27, 0x00	; 0
 4dc:	ac 0f       	add	r26, r28
 4de:	bd 1f       	adc	r27, r29
 4e0:	a2 0f       	add	r26, r18
 4e2:	b1 1d       	adc	r27, r1
 4e4:	8c 91       	ld	r24, X
 4e6:	80 83       	st	Z, r24
 4e8:	98 01       	movw	r18, r16
 4ea:	ad ec       	ldi	r26, 0xCD	; 205
 4ec:	bc ec       	ldi	r27, 0xCC	; 204
 4ee:	0e 94 52 06 	call	0xca4	; 0xca4 <__umulhisi3>
 4f2:	8c 01       	movw	r16, r24
 4f4:	16 95       	lsr	r17
 4f6:	07 95       	ror	r16
 4f8:	16 95       	lsr	r17
 4fa:	07 95       	ror	r16
 4fc:	16 95       	lsr	r17
 4fe:	07 95       	ror	r16
 500:	4f 5f       	subi	r20, 0xFF	; 255
 502:	01 15       	cp	r16, r1
 504:	11 05       	cpc	r17, r1
 506:	49 f6       	brne	.-110    	; 0x49a <LCD_SendNumber+0x42>
 508:	e4 2f       	mov	r30, r20
 50a:	f0 e0       	ldi	r31, 0x00	; 0
 50c:	de 01       	movw	r26, r28
 50e:	ae 0f       	add	r26, r30
 510:	bf 1f       	adc	r27, r31
 512:	1b 96       	adiw	r26, 0x0b	; 11
 514:	1c 92       	st	X, r1
 516:	44 23       	and	r20, r20
 518:	71 f0       	breq	.+28     	; 0x536 <LCD_SendNumber+0xde>
 51a:	de 01       	movw	r26, r28
 51c:	5b 96       	adiw	r26, 0x1b	; 27
 51e:	8b e0       	ldi	r24, 0x0B	; 11
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	8c 0f       	add	r24, r28
 524:	9d 1f       	adc	r25, r29
 526:	e8 0f       	add	r30, r24
 528:	f9 1f       	adc	r31, r25
 52a:	80 e0       	ldi	r24, 0x00	; 0
 52c:	9d 91       	ld	r25, X+
 52e:	92 93       	st	-Z, r25
 530:	8f 5f       	subi	r24, 0xFF	; 255
 532:	84 17       	cp	r24, r20
 534:	d8 f3       	brcs	.-10     	; 0x52c <LCD_SendNumber+0xd4>
 536:	ce 01       	movw	r24, r28
 538:	0b 96       	adiw	r24, 0x0b	; 11
 53a:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_SendString>
 53e:	aa 96       	adiw	r28, 0x2a	; 42
 540:	0f b6       	in	r0, 0x3f	; 63
 542:	f8 94       	cli
 544:	de bf       	out	0x3e, r29	; 62
 546:	0f be       	out	0x3f, r0	; 63
 548:	cd bf       	out	0x3d, r28	; 61
 54a:	df 91       	pop	r29
 54c:	cf 91       	pop	r28
 54e:	1f 91       	pop	r17
 550:	0f 91       	pop	r16
 552:	08 95       	ret

00000554 <LCD_GotoXY>:

void LCD_GotoXY(uint8 x,uint8 y)
{
	if (x==0)
 554:	81 11       	cpse	r24, r1
 556:	05 c0       	rjmp	.+10     	; 0x562 <LCD_GotoXY+0xe>
	{
		LCD_SendCommand((LCD_BEGIN_AT_FIRST_ROW)+y);
 558:	80 e8       	ldi	r24, 0x80	; 128
 55a:	86 0f       	add	r24, r22
 55c:	0e 94 a2 01 	call	0x344	; 0x344 <LCD_SendCommand>
 560:	08 95       	ret
	}
	else
	{
		LCD_SendCommand((LCD_BEGIN_AT_SECOND_ROW)+y);
 562:	80 ec       	ldi	r24, 0xC0	; 192
 564:	86 0f       	add	r24, r22
 566:	0e 94 a2 01 	call	0x344	; 0x344 <LCD_SendCommand>
 56a:	08 95       	ret

0000056c <LM35_ReadSample>:

uint16 LM35_ReadSample(void)
{
	uint16 u16data = 0;
	//ADC_INT_EN();
	u16data = ADC_ReadChannel(ADC_A0);
 56c:	80 e0       	ldi	r24, 0x00	; 0
 56e:	0e 94 ac 03 	call	0x758	; 0x758 <ADC_ReadChannel>
	return u16data;
}
 572:	08 95       	ret

00000574 <LM35_ReadTemp>:

uint8 LM35_ReadTemp(void)
{
	uint8 temperature = 0;
	temperature = LM35_ReadSample()/2;
 574:	0e 94 b6 02 	call	0x56c	; 0x56c <LM35_ReadSample>
	return temperature;
 578:	96 95       	lsr	r25
 57a:	87 95       	ror	r24
}
 57c:	08 95       	ret

0000057e <main>:
	uint16 Entered_Password = 0;
	STD_Boolean check = FALSE;
	uint8 signal;
	uint8 rec_element;
	//modules initialization
	RoomsLight_init();
 57e:	0e 94 b1 05 	call	0xb62	; 0xb62 <RoomsLight_init>
	LCD_init();
 582:	0e 94 c4 01 	call	0x388	; 0x388 <LCD_init>
	KP_init();
 586:	0e 94 45 01 	call	0x28a	; 0x28a <KP_init>
	USART_init();
 58a:	0e 94 9b 05 	call	0xb36	; 0xb36 <USART_init>
	ADC_init(ADC_A0);
 58e:	80 e0       	ldi	r24, 0x00	; 0
 590:	0e 94 83 03 	call	0x706	; 0x706 <ADC_init>
	//////////////////loop for entering password
    while (1) 
    {
		LCD_SendString("Enter Password");
 594:	86 e7       	ldi	r24, 0x76	; 118
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_SendString>
		LCD_GotoXY(1,0);
 59c:	60 e0       	ldi	r22, 0x00	; 0
 59e:	81 e0       	ldi	r24, 0x01	; 1
 5a0:	0e 94 aa 02 	call	0x554	; 0x554 <LCD_GotoXY>
		Entered_Password = Get_Password();
 5a4:	0e 94 c1 05 	call	0xb82	; 0xb82 <Get_Password>
		check = Check_Password(Entered_Password,PASSWORD);
 5a8:	67 e5       	ldi	r22, 0x57	; 87
 5aa:	74 e0       	ldi	r23, 0x04	; 4
 5ac:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <Check_Password>
/////////////////////////////////////////////////////if the password is correct
		if (check == TRUE)
 5b0:	81 30       	cpi	r24, 0x01	; 1
 5b2:	09 f0       	breq	.+2      	; 0x5b6 <main+0x38>
 5b4:	68 c0       	rjmp	.+208    	; 0x686 <main+0x108>
		{
			LCD_ClrScreen();
 5b6:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <LCD_ClrScreen>
			LCD_SendString("Correct Password");
 5ba:	85 e8       	ldi	r24, 0x85	; 133
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_SendString>
			LCD_GotoXY(1,0);
 5c2:	60 e0       	ldi	r22, 0x00	; 0
 5c4:	81 e0       	ldi	r24, 0x01	; 1
 5c6:	0e 94 aa 02 	call	0x554	; 0x554 <LCD_GotoXY>
			LCD_SendString("Send Command");
 5ca:	86 e9       	ldi	r24, 0x96	; 150
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_SendString>
 5d2:	2f ef       	ldi	r18, 0xFF	; 255
 5d4:	83 ed       	ldi	r24, 0xD3	; 211
 5d6:	90 e3       	ldi	r25, 0x30	; 48
 5d8:	21 50       	subi	r18, 0x01	; 1
 5da:	80 40       	sbci	r24, 0x00	; 0
 5dc:	90 40       	sbci	r25, 0x00	; 0
 5de:	e1 f7       	brne	.-8      	; 0x5d8 <main+0x5a>
 5e0:	00 c0       	rjmp	.+0      	; 0x5e2 <main+0x64>
 5e2:	00 00       	nop
			_delay_ms(1000);
			LCD_ClrScreen();
 5e4:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <LCD_ClrScreen>
			//timer1 counter start
			TIMER1_init();
 5e8:	0e 94 8c 05 	call	0xb18	; 0xb18 <TIMER1_init>
 5ec:	0f 2e       	mov	r0, r31
 5ee:	fe ee       	ldi	r31, 0xEE	; 238
 5f0:	ef 2e       	mov	r14, r31
 5f2:	f0 e0       	ldi	r31, 0x00	; 0
 5f4:	ff 2e       	mov	r15, r31
 5f6:	f0 2d       	mov	r31, r0
				{
				case led1:
						TOGGLE_BIT(PORT_A,PIN2);
						break;
				case led2:
						TOGGLE_BIT(PORT_A,PIN3);
 5f8:	68 94       	set
 5fa:	dd 24       	eor	r13, r13
 5fc:	d3 f8       	bld	r13, 3
				command[0]='\0';
				//do action of the case for each command
				switch (signal)
				{
				case led1:
						TOGGLE_BIT(PORT_A,PIN2);
 5fe:	04 e0       	ldi	r16, 0x04	; 4
			//timer1 counter start
			TIMER1_init();
			while (1)
			{
				//get command and display input on LCD
				LCD_GotoXY(1,0);
 600:	60 e0       	ldi	r22, 0x00	; 0
 602:	81 e0       	ldi	r24, 0x01	; 1
 604:	0e 94 aa 02 	call	0x554	; 0x554 <LCD_GotoXY>
 608:	ca ee       	ldi	r28, 0xEA	; 234
 60a:	d0 e0       	ldi	r29, 0x00	; 0
				for (uint8 i = 0; i<4; i++)
				{
					rec_element = USART_ReceiveData();
 60c:	0e 94 ad 05 	call	0xb5a	; 0xb5a <USART_ReceiveData>
 610:	18 2f       	mov	r17, r24
					LCD_SendChar(rec_element);
 612:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <LCD_SendChar>
					command[i]=rec_element;
 616:	19 93       	st	Y+, r17
					command[i+1]='\0';
 618:	18 82       	st	Y, r1
			TIMER1_init();
			while (1)
			{
				//get command and display input on LCD
				LCD_GotoXY(1,0);
				for (uint8 i = 0; i<4; i++)
 61a:	ce 15       	cp	r28, r14
 61c:	df 05       	cpc	r29, r15
 61e:	b1 f7       	brne	.-20     	; 0x60c <main+0x8e>
					LCD_SendChar(rec_element);
					command[i]=rec_element;
					command[i+1]='\0';
				}
				//check command
				signal = Get_Command(command);
 620:	8a ee       	ldi	r24, 0xEA	; 234
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	0e 94 2c 06 	call	0xc58	; 0xc58 <Get_Command>
				//reset command
				command[0]='\0';
 628:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__data_end>
				//do action of the case for each command
				switch (signal)
 62c:	82 30       	cpi	r24, 0x02	; 2
 62e:	41 f0       	breq	.+16     	; 0x640 <main+0xc2>
 630:	83 30       	cpi	r24, 0x03	; 3
 632:	51 f0       	breq	.+20     	; 0x648 <main+0xca>
 634:	81 30       	cpi	r24, 0x01	; 1
 636:	69 f4       	brne	.+26     	; 0x652 <main+0xd4>
				{
				case led1:
						TOGGLE_BIT(PORT_A,PIN2);
 638:	8b b3       	in	r24, 0x1b	; 27
 63a:	80 27       	eor	r24, r16
 63c:	8b bb       	out	0x1b, r24	; 27
						break;
 63e:	11 c0       	rjmp	.+34     	; 0x662 <main+0xe4>
				case led2:
						TOGGLE_BIT(PORT_A,PIN3);
 640:	8b b3       	in	r24, 0x1b	; 27
 642:	8d 25       	eor	r24, r13
 644:	8b bb       	out	0x1b, r24	; 27
						break;
 646:	0d c0       	rjmp	.+26     	; 0x662 <main+0xe4>
				case led3:
						TOGGLE_BIT(PORT_B,PIN0);
 648:	98 b3       	in	r25, 0x18	; 24
 64a:	81 e0       	ldi	r24, 0x01	; 1
 64c:	89 27       	eor	r24, r25
 64e:	88 bb       	out	0x18, r24	; 24
						break;
 650:	08 c0       	rjmp	.+16     	; 0x662 <main+0xe4>
				default://case for wrong command
						LCD_GotoXY(1,0);
 652:	60 e0       	ldi	r22, 0x00	; 0
 654:	81 e0       	ldi	r24, 0x01	; 1
 656:	0e 94 aa 02 	call	0x554	; 0x554 <LCD_GotoXY>
						LCD_SendString("Wrong Command");
 65a:	83 ea       	ldi	r24, 0xA3	; 163
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_SendString>
 662:	2f ef       	ldi	r18, 0xFF	; 255
 664:	89 e6       	ldi	r24, 0x69	; 105
 666:	98 e1       	ldi	r25, 0x18	; 24
 668:	21 50       	subi	r18, 0x01	; 1
 66a:	80 40       	sbci	r24, 0x00	; 0
 66c:	90 40       	sbci	r25, 0x00	; 0
 66e:	e1 f7       	brne	.-8      	; 0x668 <main+0xea>
 670:	00 c0       	rjmp	.+0      	; 0x672 <main+0xf4>
 672:	00 00       	nop
						break;
				}
				//clear command line
				_delay_ms(500);
				LCD_GotoXY(1,0);
 674:	60 e0       	ldi	r22, 0x00	; 0
 676:	81 e0       	ldi	r24, 0x01	; 1
 678:	0e 94 aa 02 	call	0x554	; 0x554 <LCD_GotoXY>
				LCD_SendString("             ");
 67c:	81 eb       	ldi	r24, 0xB1	; 177
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_SendString>
			}
 684:	bd cf       	rjmp	.-134    	; 0x600 <main+0x82>
		}
/////////////if the password is wrong
		else
		{
			LCD_ClrScreen();
 686:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <LCD_ClrScreen>
			LCD_SendString("Wrong Password");
 68a:	8f eb       	ldi	r24, 0xBF	; 191
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_SendString>
 692:	2f ef       	ldi	r18, 0xFF	; 255
 694:	83 ed       	ldi	r24, 0xD3	; 211
 696:	90 e3       	ldi	r25, 0x30	; 48
 698:	21 50       	subi	r18, 0x01	; 1
 69a:	80 40       	sbci	r24, 0x00	; 0
 69c:	90 40       	sbci	r25, 0x00	; 0
 69e:	e1 f7       	brne	.-8      	; 0x698 <main+0x11a>
 6a0:	00 c0       	rjmp	.+0      	; 0x6a2 <main+0x124>
 6a2:	00 00       	nop
			_delay_ms(1000);
			LCD_ClrScreen();
 6a4:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <LCD_ClrScreen>
		}		
	}
 6a8:	75 cf       	rjmp	.-278    	; 0x594 <main+0x16>

000006aa <__vector_9>:
}
///interrupt service routine when timer1 overflow to get temperature and display it on LCD
ISR (TIMER1_OVF)
{
 6aa:	1f 92       	push	r1
 6ac:	0f 92       	push	r0
 6ae:	0f b6       	in	r0, 0x3f	; 63
 6b0:	0f 92       	push	r0
 6b2:	11 24       	eor	r1, r1
 6b4:	2f 93       	push	r18
 6b6:	3f 93       	push	r19
 6b8:	4f 93       	push	r20
 6ba:	5f 93       	push	r21
 6bc:	6f 93       	push	r22
 6be:	7f 93       	push	r23
 6c0:	8f 93       	push	r24
 6c2:	9f 93       	push	r25
 6c4:	af 93       	push	r26
 6c6:	bf 93       	push	r27
 6c8:	ef 93       	push	r30
 6ca:	ff 93       	push	r31
	static uint8 temp;
	temp = LM35_ReadTemp();
 6cc:	0e 94 ba 02 	call	0x574	; 0x574 <LM35_ReadTemp>
	Display_Temp(temp);
 6d0:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <Display_Temp>
	LCD_GotoXY(1,0);
 6d4:	60 e0       	ldi	r22, 0x00	; 0
 6d6:	81 e0       	ldi	r24, 0x01	; 1
 6d8:	0e 94 aa 02 	call	0x554	; 0x554 <LCD_GotoXY>
	LCD_SendString(command);//resume the input of the command
 6dc:	8a ee       	ldi	r24, 0xEA	; 234
 6de:	90 e0       	ldi	r25, 0x00	; 0
 6e0:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_SendString>
 6e4:	ff 91       	pop	r31
 6e6:	ef 91       	pop	r30
 6e8:	bf 91       	pop	r27
 6ea:	af 91       	pop	r26
 6ec:	9f 91       	pop	r25
 6ee:	8f 91       	pop	r24
 6f0:	7f 91       	pop	r23
 6f2:	6f 91       	pop	r22
 6f4:	5f 91       	pop	r21
 6f6:	4f 91       	pop	r20
 6f8:	3f 91       	pop	r19
 6fa:	2f 91       	pop	r18
 6fc:	0f 90       	pop	r0
 6fe:	0f be       	out	0x3f, r0	; 63
 700:	0f 90       	pop	r0
 702:	1f 90       	pop	r1
 704:	18 95       	reti

00000706 <ADC_init>:


void ADC_init(ADC_Ch_type channel)
{
	//setting direction of selected ADC channel
	SET_BIT(ADC_PORT_DIR,channel);
 706:	9a b3       	in	r25, 0x1a	; 26
 708:	21 e0       	ldi	r18, 0x01	; 1
 70a:	30 e0       	ldi	r19, 0x00	; 0
 70c:	08 2e       	mov	r0, r24
 70e:	02 c0       	rjmp	.+4      	; 0x714 <ADC_init+0xe>
 710:	22 0f       	add	r18, r18
 712:	33 1f       	adc	r19, r19
 714:	0a 94       	dec	r0
 716:	e2 f7       	brpl	.-8      	; 0x710 <ADC_init+0xa>
 718:	29 2b       	or	r18, r25
 71a:	2a bb       	out	0x1a, r18	; 26
	
	//turn on the ADC module
	SET_BIT(ADCSRA,ADEN);
 71c:	37 9a       	sbi	0x06, 7	; 6
	
	//select conversion speed (prescaler)
	ADCSRA &= ADC_Prescaler_clr;
 71e:	96 b1       	in	r25, 0x06	; 6
 720:	98 7f       	andi	r25, 0xF8	; 248
 722:	96 b9       	out	0x06, r25	; 6
	ADCSRA |= ADC_Prescaler_Selected;
 724:	96 b1       	in	r25, 0x06	; 6
 726:	97 60       	ori	r25, 0x07	; 7
 728:	96 b9       	out	0x06, r25	; 6
	
	//select voltage reference
	ADMUX &= ADC_VoltRef_clr;
 72a:	97 b1       	in	r25, 0x07	; 7
 72c:	9f 73       	andi	r25, 0x3F	; 63
 72e:	97 b9       	out	0x07, r25	; 7
	ADMUX |= ADC_VoltRef_Selected;
 730:	3e 9a       	sbi	0x07, 6	; 7
	
	//select the adjust of the ADC conversion result in the ADC Data Register(right or left)
	ADMUX &= ADC_Adjust_clr;
 732:	3d 98       	cbi	0x07, 5	; 7
	ADMUX |= ADC_Adjust_Selected;
 734:	97 b1       	in	r25, 0x07	; 7
 736:	97 b9       	out	0x07, r25	; 7
	
	//mode selected for ADC
	ADMUX &= ADC_Mode_clr;
 738:	3d 98       	cbi	0x07, 5	; 7
	ADCSRA |= ADC_Mode_Selected;
 73a:	35 9a       	sbi	0x06, 5	; 6
	
#if ADC_Mode_Selected==ADC_AutoTrigging
	SFIOR &= ADC_Trigger_clr;
 73c:	90 b7       	in	r25, 0x30	; 48
 73e:	9f 71       	andi	r25, 0x1F	; 31
 740:	90 bf       	out	0x30, r25	; 48
	SFIOR |= ADC_Trigger_Selected;
 742:	90 b7       	in	r25, 0x30	; 48
 744:	90 bf       	out	0x30, r25	; 48
#endif
	//select ADC input channels
	ADMUX &= ADC_channel_clr;
 746:	97 b1       	in	r25, 0x07	; 7
 748:	90 7e       	andi	r25, 0xE0	; 224
 74a:	97 b9       	out	0x07, r25	; 7
	ADMUX |= channel;
 74c:	97 b1       	in	r25, 0x07	; 7
 74e:	89 2b       	or	r24, r25
 750:	87 b9       	out	0x07, r24	; 7
 752:	08 95       	ret

00000754 <ADC_StartConversion>:
}

void ADC_StartConversion (void)
{
	SET_BIT(ADCSRA,ADSC);
 754:	36 9a       	sbi	0x06, 6	; 6
 756:	08 95       	ret

00000758 <ADC_ReadChannel>:
	/* ADC Selection */
	ADMUX &= ADC_channel_clr;
	ADMUX |= channel;
#endif
	/* Start Conversion */
	ADC_StartConversion ();
 758:	0e 94 aa 03 	call	0x754	; 0x754 <ADC_StartConversion>
	/*wait until conversion is done */
	while((GET_BIT(ADCSRA,ADIF)) == 0);
 75c:	34 9b       	sbis	0x06, 4	; 6
 75e:	fe cf       	rjmp	.-4      	; 0x75c <ADC_ReadChannel+0x4>
	
	//Get Results
	read_value = ADCL;
 760:	84 b1       	in	r24, 0x04	; 4
	read_value |= (ADCH<<8);
 762:	25 b1       	in	r18, 0x05	; 5

	return read_value;
 764:	90 e0       	ldi	r25, 0x00	; 0
}
 766:	92 2b       	or	r25, r18
 768:	08 95       	ret

0000076a <DIO_SetPinDir>:
		PORT_C = CLR_LOW_NIB(PORT_C) | CLR_HIGH_NIB(val);
		break;
		
		case 'D':
		case 'd':
		PORT_D = CLR_LOW_NIB(PORT_D) | CLR_HIGH_NIB(val);
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	fc 01       	movw	r30, r24
 76e:	e1 54       	subi	r30, 0x41	; 65
 770:	f1 09       	sbc	r31, r1
 772:	e4 32       	cpi	r30, 0x24	; 36
 774:	f1 05       	cpc	r31, r1
 776:	08 f0       	brcs	.+2      	; 0x77a <DIO_SetPinDir+0x10>
 778:	67 c0       	rjmp	.+206    	; 0x848 <DIO_SetPinDir+0xde>
 77a:	e6 5d       	subi	r30, 0xD6	; 214
 77c:	ff 4f       	sbci	r31, 0xFF	; 255
 77e:	0c 94 4c 06 	jmp	0xc98	; 0xc98 <__tablejump2__>
 782:	41 30       	cpi	r20, 0x01	; 1
 784:	59 f4       	brne	.+22     	; 0x79c <DIO_SetPinDir+0x32>
 786:	2a b3       	in	r18, 0x1a	; 26
 788:	81 e0       	ldi	r24, 0x01	; 1
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	02 c0       	rjmp	.+4      	; 0x792 <DIO_SetPinDir+0x28>
 78e:	88 0f       	add	r24, r24
 790:	99 1f       	adc	r25, r25
 792:	6a 95       	dec	r22
 794:	e2 f7       	brpl	.-8      	; 0x78e <DIO_SetPinDir+0x24>
 796:	82 2b       	or	r24, r18
 798:	8a bb       	out	0x1a, r24	; 26
 79a:	08 95       	ret
 79c:	2a b3       	in	r18, 0x1a	; 26
 79e:	81 e0       	ldi	r24, 0x01	; 1
 7a0:	90 e0       	ldi	r25, 0x00	; 0
 7a2:	02 c0       	rjmp	.+4      	; 0x7a8 <DIO_SetPinDir+0x3e>
 7a4:	88 0f       	add	r24, r24
 7a6:	99 1f       	adc	r25, r25
 7a8:	6a 95       	dec	r22
 7aa:	e2 f7       	brpl	.-8      	; 0x7a4 <DIO_SetPinDir+0x3a>
 7ac:	80 95       	com	r24
 7ae:	82 23       	and	r24, r18
 7b0:	8a bb       	out	0x1a, r24	; 26
 7b2:	08 95       	ret
 7b4:	41 30       	cpi	r20, 0x01	; 1
 7b6:	59 f4       	brne	.+22     	; 0x7ce <DIO_SetPinDir+0x64>
 7b8:	27 b3       	in	r18, 0x17	; 23
 7ba:	81 e0       	ldi	r24, 0x01	; 1
 7bc:	90 e0       	ldi	r25, 0x00	; 0
 7be:	02 c0       	rjmp	.+4      	; 0x7c4 <DIO_SetPinDir+0x5a>
 7c0:	88 0f       	add	r24, r24
 7c2:	99 1f       	adc	r25, r25
 7c4:	6a 95       	dec	r22
 7c6:	e2 f7       	brpl	.-8      	; 0x7c0 <DIO_SetPinDir+0x56>
 7c8:	82 2b       	or	r24, r18
 7ca:	87 bb       	out	0x17, r24	; 23
 7cc:	08 95       	ret
 7ce:	27 b3       	in	r18, 0x17	; 23
 7d0:	81 e0       	ldi	r24, 0x01	; 1
 7d2:	90 e0       	ldi	r25, 0x00	; 0
 7d4:	02 c0       	rjmp	.+4      	; 0x7da <DIO_SetPinDir+0x70>
 7d6:	88 0f       	add	r24, r24
 7d8:	99 1f       	adc	r25, r25
 7da:	6a 95       	dec	r22
 7dc:	e2 f7       	brpl	.-8      	; 0x7d6 <DIO_SetPinDir+0x6c>
 7de:	80 95       	com	r24
 7e0:	82 23       	and	r24, r18
 7e2:	87 bb       	out	0x17, r24	; 23
 7e4:	08 95       	ret
 7e6:	41 30       	cpi	r20, 0x01	; 1
 7e8:	59 f4       	brne	.+22     	; 0x800 <DIO_SetPinDir+0x96>
 7ea:	24 b3       	in	r18, 0x14	; 20
 7ec:	81 e0       	ldi	r24, 0x01	; 1
 7ee:	90 e0       	ldi	r25, 0x00	; 0
 7f0:	02 c0       	rjmp	.+4      	; 0x7f6 <DIO_SetPinDir+0x8c>
 7f2:	88 0f       	add	r24, r24
 7f4:	99 1f       	adc	r25, r25
 7f6:	6a 95       	dec	r22
 7f8:	e2 f7       	brpl	.-8      	; 0x7f2 <DIO_SetPinDir+0x88>
 7fa:	82 2b       	or	r24, r18
 7fc:	84 bb       	out	0x14, r24	; 20
 7fe:	08 95       	ret
 800:	24 b3       	in	r18, 0x14	; 20
 802:	81 e0       	ldi	r24, 0x01	; 1
 804:	90 e0       	ldi	r25, 0x00	; 0
 806:	02 c0       	rjmp	.+4      	; 0x80c <DIO_SetPinDir+0xa2>
 808:	88 0f       	add	r24, r24
 80a:	99 1f       	adc	r25, r25
 80c:	6a 95       	dec	r22
 80e:	e2 f7       	brpl	.-8      	; 0x808 <DIO_SetPinDir+0x9e>
 810:	80 95       	com	r24
 812:	82 23       	and	r24, r18
 814:	84 bb       	out	0x14, r24	; 20
 816:	08 95       	ret
 818:	41 30       	cpi	r20, 0x01	; 1
 81a:	59 f4       	brne	.+22     	; 0x832 <DIO_SetPinDir+0xc8>
 81c:	21 b3       	in	r18, 0x11	; 17
 81e:	81 e0       	ldi	r24, 0x01	; 1
 820:	90 e0       	ldi	r25, 0x00	; 0
 822:	02 c0       	rjmp	.+4      	; 0x828 <DIO_SetPinDir+0xbe>
 824:	88 0f       	add	r24, r24
 826:	99 1f       	adc	r25, r25
 828:	6a 95       	dec	r22
 82a:	e2 f7       	brpl	.-8      	; 0x824 <DIO_SetPinDir+0xba>
 82c:	82 2b       	or	r24, r18
 82e:	81 bb       	out	0x11, r24	; 17
 830:	08 95       	ret
 832:	21 b3       	in	r18, 0x11	; 17
 834:	81 e0       	ldi	r24, 0x01	; 1
 836:	90 e0       	ldi	r25, 0x00	; 0
 838:	02 c0       	rjmp	.+4      	; 0x83e <DIO_SetPinDir+0xd4>
 83a:	88 0f       	add	r24, r24
 83c:	99 1f       	adc	r25, r25
 83e:	6a 95       	dec	r22
 840:	e2 f7       	brpl	.-8      	; 0x83a <DIO_SetPinDir+0xd0>
 842:	80 95       	com	r24
 844:	82 23       	and	r24, r18
 846:	81 bb       	out	0x11, r24	; 17
 848:	08 95       	ret

0000084a <DIO_WritePin>:
 84a:	90 e0       	ldi	r25, 0x00	; 0
 84c:	fc 01       	movw	r30, r24
 84e:	e1 54       	subi	r30, 0x41	; 65
 850:	f1 09       	sbc	r31, r1
 852:	e4 32       	cpi	r30, 0x24	; 36
 854:	f1 05       	cpc	r31, r1
 856:	08 f0       	brcs	.+2      	; 0x85a <DIO_WritePin+0x10>
 858:	67 c0       	rjmp	.+206    	; 0x928 <__stack+0xc9>
 85a:	e2 5b       	subi	r30, 0xB2	; 178
 85c:	ff 4f       	sbci	r31, 0xFF	; 255
 85e:	0c 94 4c 06 	jmp	0xc98	; 0xc98 <__tablejump2__>
 862:	41 30       	cpi	r20, 0x01	; 1
 864:	59 f4       	brne	.+22     	; 0x87c <__stack+0x1d>
 866:	2b b3       	in	r18, 0x1b	; 27
 868:	81 e0       	ldi	r24, 0x01	; 1
 86a:	90 e0       	ldi	r25, 0x00	; 0
 86c:	02 c0       	rjmp	.+4      	; 0x872 <__stack+0x13>
 86e:	88 0f       	add	r24, r24
 870:	99 1f       	adc	r25, r25
 872:	6a 95       	dec	r22
 874:	e2 f7       	brpl	.-8      	; 0x86e <__stack+0xf>
 876:	82 2b       	or	r24, r18
 878:	8b bb       	out	0x1b, r24	; 27
 87a:	08 95       	ret
 87c:	2b b3       	in	r18, 0x1b	; 27
 87e:	81 e0       	ldi	r24, 0x01	; 1
 880:	90 e0       	ldi	r25, 0x00	; 0
 882:	02 c0       	rjmp	.+4      	; 0x888 <__stack+0x29>
 884:	88 0f       	add	r24, r24
 886:	99 1f       	adc	r25, r25
 888:	6a 95       	dec	r22
 88a:	e2 f7       	brpl	.-8      	; 0x884 <__stack+0x25>
 88c:	80 95       	com	r24
 88e:	82 23       	and	r24, r18
 890:	8b bb       	out	0x1b, r24	; 27
 892:	08 95       	ret
 894:	41 30       	cpi	r20, 0x01	; 1
 896:	59 f4       	brne	.+22     	; 0x8ae <__stack+0x4f>
 898:	28 b3       	in	r18, 0x18	; 24
 89a:	81 e0       	ldi	r24, 0x01	; 1
 89c:	90 e0       	ldi	r25, 0x00	; 0
 89e:	02 c0       	rjmp	.+4      	; 0x8a4 <__stack+0x45>
 8a0:	88 0f       	add	r24, r24
 8a2:	99 1f       	adc	r25, r25
 8a4:	6a 95       	dec	r22
 8a6:	e2 f7       	brpl	.-8      	; 0x8a0 <__stack+0x41>
 8a8:	82 2b       	or	r24, r18
 8aa:	88 bb       	out	0x18, r24	; 24
 8ac:	08 95       	ret
 8ae:	28 b3       	in	r18, 0x18	; 24
 8b0:	81 e0       	ldi	r24, 0x01	; 1
 8b2:	90 e0       	ldi	r25, 0x00	; 0
 8b4:	02 c0       	rjmp	.+4      	; 0x8ba <__stack+0x5b>
 8b6:	88 0f       	add	r24, r24
 8b8:	99 1f       	adc	r25, r25
 8ba:	6a 95       	dec	r22
 8bc:	e2 f7       	brpl	.-8      	; 0x8b6 <__stack+0x57>
 8be:	80 95       	com	r24
 8c0:	82 23       	and	r24, r18
 8c2:	88 bb       	out	0x18, r24	; 24
 8c4:	08 95       	ret
 8c6:	41 30       	cpi	r20, 0x01	; 1
 8c8:	59 f4       	brne	.+22     	; 0x8e0 <__stack+0x81>
 8ca:	25 b3       	in	r18, 0x15	; 21
 8cc:	81 e0       	ldi	r24, 0x01	; 1
 8ce:	90 e0       	ldi	r25, 0x00	; 0
 8d0:	02 c0       	rjmp	.+4      	; 0x8d6 <__stack+0x77>
 8d2:	88 0f       	add	r24, r24
 8d4:	99 1f       	adc	r25, r25
 8d6:	6a 95       	dec	r22
 8d8:	e2 f7       	brpl	.-8      	; 0x8d2 <__stack+0x73>
 8da:	82 2b       	or	r24, r18
 8dc:	85 bb       	out	0x15, r24	; 21
 8de:	08 95       	ret
 8e0:	25 b3       	in	r18, 0x15	; 21
 8e2:	81 e0       	ldi	r24, 0x01	; 1
 8e4:	90 e0       	ldi	r25, 0x00	; 0
 8e6:	02 c0       	rjmp	.+4      	; 0x8ec <__stack+0x8d>
 8e8:	88 0f       	add	r24, r24
 8ea:	99 1f       	adc	r25, r25
 8ec:	6a 95       	dec	r22
 8ee:	e2 f7       	brpl	.-8      	; 0x8e8 <__stack+0x89>
 8f0:	80 95       	com	r24
 8f2:	82 23       	and	r24, r18
 8f4:	85 bb       	out	0x15, r24	; 21
 8f6:	08 95       	ret
 8f8:	41 30       	cpi	r20, 0x01	; 1
 8fa:	59 f4       	brne	.+22     	; 0x912 <__stack+0xb3>
 8fc:	22 b3       	in	r18, 0x12	; 18
 8fe:	81 e0       	ldi	r24, 0x01	; 1
 900:	90 e0       	ldi	r25, 0x00	; 0
 902:	02 c0       	rjmp	.+4      	; 0x908 <__stack+0xa9>
 904:	88 0f       	add	r24, r24
 906:	99 1f       	adc	r25, r25
 908:	6a 95       	dec	r22
 90a:	e2 f7       	brpl	.-8      	; 0x904 <__stack+0xa5>
 90c:	82 2b       	or	r24, r18
 90e:	82 bb       	out	0x12, r24	; 18
 910:	08 95       	ret
 912:	22 b3       	in	r18, 0x12	; 18
 914:	81 e0       	ldi	r24, 0x01	; 1
 916:	90 e0       	ldi	r25, 0x00	; 0
 918:	02 c0       	rjmp	.+4      	; 0x91e <__stack+0xbf>
 91a:	88 0f       	add	r24, r24
 91c:	99 1f       	adc	r25, r25
 91e:	6a 95       	dec	r22
 920:	e2 f7       	brpl	.-8      	; 0x91a <__stack+0xbb>
 922:	80 95       	com	r24
 924:	82 23       	and	r24, r18
 926:	82 bb       	out	0x12, r24	; 18
 928:	08 95       	ret

0000092a <DIO_ReadPin>:
 92a:	90 e0       	ldi	r25, 0x00	; 0
 92c:	fc 01       	movw	r30, r24
 92e:	e1 54       	subi	r30, 0x41	; 65
 930:	f1 09       	sbc	r31, r1
 932:	e4 32       	cpi	r30, 0x24	; 36
 934:	f1 05       	cpc	r31, r1
 936:	58 f5       	brcc	.+86     	; 0x98e <DIO_ReadPin+0x64>
 938:	ee 58       	subi	r30, 0x8E	; 142
 93a:	ff 4f       	sbci	r31, 0xFF	; 255
 93c:	0c 94 4c 06 	jmp	0xc98	; 0xc98 <__tablejump2__>
 940:	29 b3       	in	r18, 0x19	; 25
 942:	81 e0       	ldi	r24, 0x01	; 1
 944:	90 e0       	ldi	r25, 0x00	; 0
 946:	02 c0       	rjmp	.+4      	; 0x94c <DIO_ReadPin+0x22>
 948:	88 0f       	add	r24, r24
 94a:	99 1f       	adc	r25, r25
 94c:	6a 95       	dec	r22
 94e:	e2 f7       	brpl	.-8      	; 0x948 <DIO_ReadPin+0x1e>
 950:	28 23       	and	r18, r24
 952:	1d c0       	rjmp	.+58     	; 0x98e <DIO_ReadPin+0x64>
 954:	26 b3       	in	r18, 0x16	; 22
 956:	81 e0       	ldi	r24, 0x01	; 1
 958:	90 e0       	ldi	r25, 0x00	; 0
 95a:	02 c0       	rjmp	.+4      	; 0x960 <DIO_ReadPin+0x36>
 95c:	88 0f       	add	r24, r24
 95e:	99 1f       	adc	r25, r25
 960:	6a 95       	dec	r22
 962:	e2 f7       	brpl	.-8      	; 0x95c <DIO_ReadPin+0x32>
 964:	28 23       	and	r18, r24
 966:	13 c0       	rjmp	.+38     	; 0x98e <DIO_ReadPin+0x64>
 968:	23 b3       	in	r18, 0x13	; 19
 96a:	81 e0       	ldi	r24, 0x01	; 1
 96c:	90 e0       	ldi	r25, 0x00	; 0
 96e:	02 c0       	rjmp	.+4      	; 0x974 <DIO_ReadPin+0x4a>
 970:	88 0f       	add	r24, r24
 972:	99 1f       	adc	r25, r25
 974:	6a 95       	dec	r22
 976:	e2 f7       	brpl	.-8      	; 0x970 <DIO_ReadPin+0x46>
 978:	28 23       	and	r18, r24
 97a:	09 c0       	rjmp	.+18     	; 0x98e <DIO_ReadPin+0x64>
 97c:	20 b3       	in	r18, 0x10	; 16
 97e:	81 e0       	ldi	r24, 0x01	; 1
 980:	90 e0       	ldi	r25, 0x00	; 0
 982:	02 c0       	rjmp	.+4      	; 0x988 <DIO_ReadPin+0x5e>
 984:	88 0f       	add	r24, r24
 986:	99 1f       	adc	r25, r25
 988:	6a 95       	dec	r22
 98a:	e2 f7       	brpl	.-8      	; 0x984 <DIO_ReadPin+0x5a>
 98c:	28 23       	and	r18, r24
 98e:	82 2f       	mov	r24, r18
 990:	08 95       	ret

00000992 <DIO_WritePortLvl>:
 992:	90 e0       	ldi	r25, 0x00	; 0
 994:	fc 01       	movw	r30, r24
 996:	e1 54       	subi	r30, 0x41	; 65
 998:	f1 09       	sbc	r31, r1
 99a:	e4 32       	cpi	r30, 0x24	; 36
 99c:	f1 05       	cpc	r31, r1
 99e:	38 f5       	brcc	.+78     	; 0x9ee <DIO_WritePortLvl+0x5c>
 9a0:	ea 56       	subi	r30, 0x6A	; 106
 9a2:	ff 4f       	sbci	r31, 0xFF	; 255
 9a4:	0c 94 4c 06 	jmp	0xc98	; 0xc98 <__tablejump2__>
 9a8:	61 30       	cpi	r22, 0x01	; 1
 9aa:	21 f4       	brne	.+8      	; 0x9b4 <DIO_WritePortLvl+0x22>
 9ac:	8b b3       	in	r24, 0x1b	; 27
 9ae:	8f ef       	ldi	r24, 0xFF	; 255
 9b0:	8b bb       	out	0x1b, r24	; 27
 9b2:	08 95       	ret
 9b4:	8b b3       	in	r24, 0x1b	; 27
 9b6:	1b ba       	out	0x1b, r1	; 27
 9b8:	08 95       	ret
 9ba:	61 30       	cpi	r22, 0x01	; 1
 9bc:	21 f4       	brne	.+8      	; 0x9c6 <DIO_WritePortLvl+0x34>
 9be:	88 b3       	in	r24, 0x18	; 24
 9c0:	8f ef       	ldi	r24, 0xFF	; 255
 9c2:	88 bb       	out	0x18, r24	; 24
 9c4:	08 95       	ret
 9c6:	88 b3       	in	r24, 0x18	; 24
 9c8:	18 ba       	out	0x18, r1	; 24
 9ca:	08 95       	ret
 9cc:	61 30       	cpi	r22, 0x01	; 1
 9ce:	21 f4       	brne	.+8      	; 0x9d8 <DIO_WritePortLvl+0x46>
 9d0:	85 b3       	in	r24, 0x15	; 21
 9d2:	8f ef       	ldi	r24, 0xFF	; 255
 9d4:	85 bb       	out	0x15, r24	; 21
 9d6:	08 95       	ret
 9d8:	85 b3       	in	r24, 0x15	; 21
 9da:	15 ba       	out	0x15, r1	; 21
 9dc:	08 95       	ret
 9de:	61 30       	cpi	r22, 0x01	; 1
 9e0:	21 f4       	brne	.+8      	; 0x9ea <DIO_WritePortLvl+0x58>
 9e2:	82 b3       	in	r24, 0x12	; 18
 9e4:	8f ef       	ldi	r24, 0xFF	; 255
 9e6:	82 bb       	out	0x12, r24	; 18
 9e8:	08 95       	ret
 9ea:	82 b3       	in	r24, 0x12	; 18
 9ec:	12 ba       	out	0x12, r1	; 18
 9ee:	08 95       	ret

000009f0 <DIO_SetLowNibDir>:
 9f0:	90 e0       	ldi	r25, 0x00	; 0
 9f2:	fc 01       	movw	r30, r24
 9f4:	e1 54       	subi	r30, 0x41	; 65
 9f6:	f1 09       	sbc	r31, r1
 9f8:	e4 32       	cpi	r30, 0x24	; 36
 9fa:	f1 05       	cpc	r31, r1
 9fc:	58 f5       	brcc	.+86     	; 0xa54 <DIO_SetLowNibDir+0x64>
 9fe:	e6 54       	subi	r30, 0x46	; 70
 a00:	ff 4f       	sbci	r31, 0xFF	; 255
 a02:	0c 94 4c 06 	jmp	0xc98	; 0xc98 <__tablejump2__>
 a06:	61 30       	cpi	r22, 0x01	; 1
 a08:	21 f4       	brne	.+8      	; 0xa12 <DIO_SetLowNibDir+0x22>
 a0a:	8a b3       	in	r24, 0x1a	; 26
 a0c:	8f 60       	ori	r24, 0x0F	; 15
 a0e:	8a bb       	out	0x1a, r24	; 26
 a10:	08 95       	ret
 a12:	8a b3       	in	r24, 0x1a	; 26
 a14:	80 7f       	andi	r24, 0xF0	; 240
 a16:	8a bb       	out	0x1a, r24	; 26
 a18:	08 95       	ret
 a1a:	61 30       	cpi	r22, 0x01	; 1
 a1c:	21 f4       	brne	.+8      	; 0xa26 <DIO_SetLowNibDir+0x36>
 a1e:	87 b3       	in	r24, 0x17	; 23
 a20:	8f 60       	ori	r24, 0x0F	; 15
 a22:	87 bb       	out	0x17, r24	; 23
 a24:	08 95       	ret
 a26:	87 b3       	in	r24, 0x17	; 23
 a28:	80 7f       	andi	r24, 0xF0	; 240
 a2a:	87 bb       	out	0x17, r24	; 23
 a2c:	08 95       	ret
 a2e:	61 30       	cpi	r22, 0x01	; 1
 a30:	21 f4       	brne	.+8      	; 0xa3a <DIO_SetLowNibDir+0x4a>
 a32:	84 b3       	in	r24, 0x14	; 20
 a34:	8f 60       	ori	r24, 0x0F	; 15
 a36:	84 bb       	out	0x14, r24	; 20
 a38:	08 95       	ret
 a3a:	84 b3       	in	r24, 0x14	; 20
 a3c:	80 7f       	andi	r24, 0xF0	; 240
 a3e:	84 bb       	out	0x14, r24	; 20
 a40:	08 95       	ret
 a42:	61 30       	cpi	r22, 0x01	; 1
 a44:	21 f4       	brne	.+8      	; 0xa4e <DIO_SetLowNibDir+0x5e>
 a46:	81 b3       	in	r24, 0x11	; 17
 a48:	8f 60       	ori	r24, 0x0F	; 15
 a4a:	81 bb       	out	0x11, r24	; 17
 a4c:	08 95       	ret
 a4e:	81 b3       	in	r24, 0x11	; 17
 a50:	80 7f       	andi	r24, 0xF0	; 240
 a52:	81 bb       	out	0x11, r24	; 17
 a54:	08 95       	ret

00000a56 <DIO_SetHighNibDir>:
 a56:	90 e0       	ldi	r25, 0x00	; 0
 a58:	fc 01       	movw	r30, r24
 a5a:	e1 54       	subi	r30, 0x41	; 65
 a5c:	f1 09       	sbc	r31, r1
 a5e:	e4 32       	cpi	r30, 0x24	; 36
 a60:	f1 05       	cpc	r31, r1
 a62:	58 f5       	brcc	.+86     	; 0xaba <DIO_SetHighNibDir+0x64>
 a64:	e2 52       	subi	r30, 0x22	; 34
 a66:	ff 4f       	sbci	r31, 0xFF	; 255
 a68:	0c 94 4c 06 	jmp	0xc98	; 0xc98 <__tablejump2__>
 a6c:	61 30       	cpi	r22, 0x01	; 1
 a6e:	21 f4       	brne	.+8      	; 0xa78 <DIO_SetHighNibDir+0x22>
 a70:	8a b3       	in	r24, 0x1a	; 26
 a72:	80 6f       	ori	r24, 0xF0	; 240
 a74:	8a bb       	out	0x1a, r24	; 26
 a76:	08 95       	ret
 a78:	8a b3       	in	r24, 0x1a	; 26
 a7a:	8f 70       	andi	r24, 0x0F	; 15
 a7c:	8a bb       	out	0x1a, r24	; 26
 a7e:	08 95       	ret
 a80:	61 30       	cpi	r22, 0x01	; 1
 a82:	21 f4       	brne	.+8      	; 0xa8c <DIO_SetHighNibDir+0x36>
 a84:	87 b3       	in	r24, 0x17	; 23
 a86:	80 6f       	ori	r24, 0xF0	; 240
 a88:	87 bb       	out	0x17, r24	; 23
 a8a:	08 95       	ret
 a8c:	87 b3       	in	r24, 0x17	; 23
 a8e:	8f 70       	andi	r24, 0x0F	; 15
 a90:	87 bb       	out	0x17, r24	; 23
 a92:	08 95       	ret
 a94:	61 30       	cpi	r22, 0x01	; 1
 a96:	21 f4       	brne	.+8      	; 0xaa0 <DIO_SetHighNibDir+0x4a>
 a98:	84 b3       	in	r24, 0x14	; 20
 a9a:	80 6f       	ori	r24, 0xF0	; 240
 a9c:	84 bb       	out	0x14, r24	; 20
 a9e:	08 95       	ret
 aa0:	84 b3       	in	r24, 0x14	; 20
 aa2:	8f 70       	andi	r24, 0x0F	; 15
 aa4:	84 bb       	out	0x14, r24	; 20
 aa6:	08 95       	ret
 aa8:	61 30       	cpi	r22, 0x01	; 1
 aaa:	21 f4       	brne	.+8      	; 0xab4 <DIO_SetHighNibDir+0x5e>
 aac:	81 b3       	in	r24, 0x11	; 17
 aae:	80 6f       	ori	r24, 0xF0	; 240
 ab0:	81 bb       	out	0x11, r24	; 17
 ab2:	08 95       	ret
 ab4:	81 b3       	in	r24, 0x11	; 17
 ab6:	8f 70       	andi	r24, 0x0F	; 15
 ab8:	81 bb       	out	0x11, r24	; 17
 aba:	08 95       	ret

00000abc <DIO_WriteHighNibVal>:
}

/***write output to the second 4 pins of the port***/
void DIO_WriteHighNibVal(uint8 port,uint8 val)
{
	switch(port)
 abc:	90 e0       	ldi	r25, 0x00	; 0
 abe:	fc 01       	movw	r30, r24
 ac0:	e1 54       	subi	r30, 0x41	; 65
 ac2:	f1 09       	sbc	r31, r1
 ac4:	e4 32       	cpi	r30, 0x24	; 36
 ac6:	f1 05       	cpc	r31, r1
 ac8:	f8 f4       	brcc	.+62     	; 0xb08 <DIO_WriteHighNibVal+0x4c>
 aca:	ee 5f       	subi	r30, 0xFE	; 254
 acc:	fe 4f       	sbci	r31, 0xFE	; 254
 ace:	0c 94 4c 06 	jmp	0xc98	; 0xc98 <__tablejump2__>
	{
		case 'A':
		case 'a':
		PORT_A = CLR_HIGH_NIB(PORT_A) | CLR_LOW_NIB(val);
 ad2:	8b b3       	in	r24, 0x1b	; 27
 ad4:	8f 70       	andi	r24, 0x0F	; 15
 ad6:	8b bb       	out	0x1b, r24	; 27
 ad8:	60 7f       	andi	r22, 0xF0	; 240
 ada:	68 2b       	or	r22, r24
 adc:	6b bb       	out	0x1b, r22	; 27
		break;
 ade:	08 95       	ret
		
		case 'B':
		case 'b':
		PORT_B = CLR_HIGH_NIB(PORT_B) | CLR_LOW_NIB(val);
 ae0:	88 b3       	in	r24, 0x18	; 24
 ae2:	8f 70       	andi	r24, 0x0F	; 15
 ae4:	88 bb       	out	0x18, r24	; 24
 ae6:	60 7f       	andi	r22, 0xF0	; 240
 ae8:	68 2b       	or	r22, r24
 aea:	68 bb       	out	0x18, r22	; 24
		break;
 aec:	08 95       	ret
		
		case 'C':
		case 'c':
		PORT_C = CLR_HIGH_NIB(PORT_C) | CLR_LOW_NIB(val);
 aee:	85 b3       	in	r24, 0x15	; 21
 af0:	8f 70       	andi	r24, 0x0F	; 15
 af2:	85 bb       	out	0x15, r24	; 21
 af4:	60 7f       	andi	r22, 0xF0	; 240
 af6:	68 2b       	or	r22, r24
 af8:	65 bb       	out	0x15, r22	; 21
		break;
 afa:	08 95       	ret
		
		case 'D':
		case 'd':
		PORT_A = CLR_HIGH_NIB(PORT_D) | CLR_LOW_NIB(val);
 afc:	82 b3       	in	r24, 0x12	; 18
 afe:	8f 70       	andi	r24, 0x0F	; 15
 b00:	82 bb       	out	0x12, r24	; 18
 b02:	60 7f       	andi	r22, 0xF0	; 240
 b04:	68 2b       	or	r22, r24
 b06:	6b bb       	out	0x1b, r22	; 27
 b08:	08 95       	ret

00000b0a <TIMER1_INT_EN>:
	}
}

void TIMER1_INT_EN(void)
{
	GLOBAL_INT_EN;
 b0a:	8f b7       	in	r24, 0x3f	; 63
 b0c:	80 68       	ori	r24, 0x80	; 128
 b0e:	8f bf       	out	0x3f, r24	; 63
	SET_BIT(TIMSK,TOIE1);
 b10:	89 b7       	in	r24, 0x39	; 57
 b12:	84 60       	ori	r24, 0x04	; 4
 b14:	89 bf       	out	0x39, r24	; 57
 b16:	08 95       	ret

00000b18 <TIMER1_init>:
#include "TIMER1.h"

void TIMER1_init(void)
{
	//set direction to output for OC1A and OC1B pin
	SET_BIT(OC1_DIR,OC1B_PIN);
 b18:	8c 9a       	sbi	0x11, 4	; 17
	SET_BIT(OC1_DIR,OC1A_PIN);
 b1a:	8d 9a       	sbi	0x11, 5	; 17
	//clear TCCR1
	TCCR1A = 0x00;
 b1c:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0x00;
 b1e:	1e bc       	out	0x2e, r1	; 46
	//set timer mode
	////NORMAL MODE
	//set compare output mode
	/////NO COMPARE
	//enable interrupt
	TIMER1_INT_EN();
 b20:	0e 94 85 05 	call	0xb0a	; 0xb0a <TIMER1_INT_EN>
	
	//set pre-scaler
	TCCR1B &= TIMER1_PRESCALER_CLR;
 b24:	8e b5       	in	r24, 0x2e	; 46
 b26:	88 7f       	andi	r24, 0xF8	; 248
 b28:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= TIMER1_PRESCALER_SELECTED;
 b2a:	8e b5       	in	r24, 0x2e	; 46
 b2c:	84 60       	ori	r24, 0x04	; 4
 b2e:	8e bd       	out	0x2e, r24	; 46
		TCNT1H = preload_count - 255;
		TCNT1L = 255;
	} 
	else
	{
		TCNT1H = 0;
 b30:	1d bc       	out	0x2d, r1	; 45
		TCNT1L = preload_count;
 b32:	1c bc       	out	0x2c, r1	; 44
 b34:	08 95       	ret

00000b36 <USART_init>:
	while(au8Str[i] != '\0')
	{
		USART_SendData(au8Str[i]);
		i++;
	}
}
 b36:	87 e6       	ldi	r24, 0x67	; 103
 b38:	89 b9       	out	0x09, r24	; 9
 b3a:	88 98       	cbi	0x11, 0	; 17
 b3c:	89 9a       	sbi	0x11, 1	; 17
 b3e:	1b b8       	out	0x0b, r1	; 11
 b40:	1a b8       	out	0x0a, r1	; 10
 b42:	80 b5       	in	r24, 0x20	; 32
 b44:	80 68       	ori	r24, 0x80	; 128
 b46:	80 bd       	out	0x20, r24	; 32
 b48:	80 b5       	in	r24, 0x20	; 32
 b4a:	82 60       	ori	r24, 0x02	; 2
 b4c:	80 bd       	out	0x20, r24	; 32
 b4e:	80 b5       	in	r24, 0x20	; 32
 b50:	84 60       	ori	r24, 0x04	; 4
 b52:	80 bd       	out	0x20, r24	; 32
 b54:	53 9a       	sbi	0x0a, 3	; 10
 b56:	54 9a       	sbi	0x0a, 4	; 10
 b58:	08 95       	ret

00000b5a <USART_ReceiveData>:

uint8 USART_ReceiveData(void)
{
	uint8 u8RecData;
	//wait recieve finish
	while(!GET_BIT(UCSRA,RXC));
 b5a:	5f 9b       	sbis	0x0b, 7	; 11
 b5c:	fe cf       	rjmp	.-4      	; 0xb5a <USART_ReceiveData>
	u8RecData = UDR;
 b5e:	8c b1       	in	r24, 0x0c	; 12
	//return data,UDR
	return u8RecData;
}
 b60:	08 95       	ret

00000b62 <RoomsLight_init>:

#include "smart_home.h"
//initialization for ports of leds
void RoomsLight_init(void)
{
	DIO_SetPinDir('B',PIN0,OUT);
 b62:	41 e0       	ldi	r20, 0x01	; 1
 b64:	60 e0       	ldi	r22, 0x00	; 0
 b66:	82 e4       	ldi	r24, 0x42	; 66
 b68:	0e 94 b5 03 	call	0x76a	; 0x76a <DIO_SetPinDir>
	DIO_SetPinDir('A',PIN2,OUT);
 b6c:	41 e0       	ldi	r20, 0x01	; 1
 b6e:	62 e0       	ldi	r22, 0x02	; 2
 b70:	81 e4       	ldi	r24, 0x41	; 65
 b72:	0e 94 b5 03 	call	0x76a	; 0x76a <DIO_SetPinDir>
	DIO_SetPinDir('A',PIN3,OUT);
 b76:	41 e0       	ldi	r20, 0x01	; 1
 b78:	63 e0       	ldi	r22, 0x03	; 3
 b7a:	81 e4       	ldi	r24, 0x41	; 65
 b7c:	0e 94 b5 03 	call	0x76a	; 0x76a <DIO_SetPinDir>
 b80:	08 95       	ret

00000b82 <Get_Password>:
}
//function to input password using keypad
uint16 Get_Password(void)
{
 b82:	0f 93       	push	r16
 b84:	1f 93       	push	r17
 b86:	cf 93       	push	r28
	uint8 count = 0;
	uint8 num = 0;
	uint16 password =0;
 b88:	00 e0       	ldi	r16, 0x00	; 0
 b8a:	10 e0       	ldi	r17, 0x00	; 0
	DIO_SetPinDir('A',PIN3,OUT);
}
//function to input password using keypad
uint16 Get_Password(void)
{
	uint8 count = 0;
 b8c:	c0 e0       	ldi	r28, 0x00	; 0
	uint8 num = 0;
	uint16 password =0;
	while (count < 4)
	{
		if (KP_Get_Key() != ' ')
 b8e:	0e 94 52 01 	call	0x2a4	; 0x2a4 <KP_Get_Key>
 b92:	80 32       	cpi	r24, 0x20	; 32
 b94:	f9 f0       	breq	.+62     	; 0xbd4 <Get_Password+0x52>
		{
			num = KP_Get_Key();
 b96:	0e 94 52 01 	call	0x2a4	; 0x2a4 <KP_Get_Key>
			//calculate the number
			password = (password * 10) + num;
 b9a:	98 01       	movw	r18, r16
 b9c:	22 0f       	add	r18, r18
 b9e:	33 1f       	adc	r19, r19
 ba0:	00 0f       	add	r16, r16
 ba2:	11 1f       	adc	r17, r17
 ba4:	00 0f       	add	r16, r16
 ba6:	11 1f       	adc	r17, r17
 ba8:	00 0f       	add	r16, r16
 baa:	11 1f       	adc	r17, r17
 bac:	02 0f       	add	r16, r18
 bae:	13 1f       	adc	r17, r19
 bb0:	08 0f       	add	r16, r24
 bb2:	11 1d       	adc	r17, r1
			LCD_SendChar('*');
 bb4:	8a e2       	ldi	r24, 0x2A	; 42
 bb6:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <LCD_SendChar>
			count++;
 bba:	cf 5f       	subi	r28, 0xFF	; 255
 bbc:	2f ef       	ldi	r18, 0xFF	; 255
 bbe:	85 ea       	ldi	r24, 0xA5	; 165
 bc0:	9e e0       	ldi	r25, 0x0E	; 14
 bc2:	21 50       	subi	r18, 0x01	; 1
 bc4:	80 40       	sbci	r24, 0x00	; 0
 bc6:	90 40       	sbci	r25, 0x00	; 0
 bc8:	e1 f7       	brne	.-8      	; 0xbc2 <Get_Password+0x40>
 bca:	00 c0       	rjmp	.+0      	; 0xbcc <Get_Password+0x4a>
 bcc:	00 00       	nop
uint16 Get_Password(void)
{
	uint8 count = 0;
	uint8 num = 0;
	uint16 password =0;
	while (count < 4)
 bce:	c4 30       	cpi	r28, 0x04	; 4
 bd0:	19 f0       	breq	.+6      	; 0xbd8 <Get_Password+0x56>
 bd2:	dd cf       	rjmp	.-70     	; 0xb8e <Get_Password+0xc>
 bd4:	c4 30       	cpi	r28, 0x04	; 4
 bd6:	d8 f2       	brcs	.-74     	; 0xb8e <Get_Password+0xc>
			count++;
			_delay_ms(300);
		}
	}
	return password;
}
 bd8:	c8 01       	movw	r24, r16
 bda:	cf 91       	pop	r28
 bdc:	1f 91       	pop	r17
 bde:	0f 91       	pop	r16
 be0:	08 95       	ret

00000be2 <Check_Password>:
	}
	else
	{
		check = FALSE;
	}
	return check;
 be2:	21 e0       	ldi	r18, 0x01	; 1
 be4:	86 17       	cp	r24, r22
 be6:	97 07       	cpc	r25, r23
 be8:	09 f0       	breq	.+2      	; 0xbec <Check_Password+0xa>
 bea:	20 e0       	ldi	r18, 0x00	; 0
}
 bec:	82 2f       	mov	r24, r18
 bee:	08 95       	ret

00000bf0 <Display_Temp>:
//function to display the temperature
void Display_Temp (uint8 temperature)
{
 bf0:	cf 93       	push	r28
 bf2:	c8 2f       	mov	r28, r24
	LCD_GotoXY(0,0);
 bf4:	60 e0       	ldi	r22, 0x00	; 0
 bf6:	80 e0       	ldi	r24, 0x00	; 0
 bf8:	0e 94 aa 02 	call	0x554	; 0x554 <LCD_GotoXY>
	LCD_SendString("Temperature=");
 bfc:	8e ec       	ldi	r24, 0xCE	; 206
 bfe:	90 e0       	ldi	r25, 0x00	; 0
 c00:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_SendString>
	LCD_SendNumber(temperature);
 c04:	8c 2f       	mov	r24, r28
 c06:	90 e0       	ldi	r25, 0x00	; 0
 c08:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_SendNumber>
	LCD_SendChar('C');
 c0c:	83 e4       	ldi	r24, 0x43	; 67
 c0e:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <LCD_SendChar>
}
 c12:	cf 91       	pop	r28
 c14:	08 95       	ret

00000c16 <check_command>:
//function to compare the input command with saved commands
STD_Boolean check_command(uint8* command, uint8* strng)
{
 c16:	dc 01       	movw	r26, r24
	STD_Boolean check;
	uint8 i = 0;
	while (command[i]!='\0')
 c18:	8c 91       	ld	r24, X
 c1a:	88 23       	and	r24, r24
 c1c:	c9 f0       	breq	.+50     	; 0xc50 <check_command+0x3a>
	{
		if (command[i] == strng[i])
 c1e:	fb 01       	movw	r30, r22
 c20:	90 81       	ld	r25, Z
 c22:	89 17       	cp	r24, r25
 c24:	49 f0       	breq	.+18     	; 0xc38 <check_command+0x22>
			check = TRUE;
			i++;
		}
		else
		{
			check = FALSE;
 c26:	80 e0       	ldi	r24, 0x00	; 0
 c28:	08 95       	ret
{
	STD_Boolean check;
	uint8 i = 0;
	while (command[i]!='\0')
	{
		if (command[i] == strng[i])
 c2a:	fb 01       	movw	r30, r22
 c2c:	e2 0f       	add	r30, r18
 c2e:	f3 1f       	adc	r31, r19
 c30:	20 81       	ld	r18, Z
 c32:	42 17       	cp	r20, r18
 c34:	11 f0       	breq	.+4      	; 0xc3a <check_command+0x24>
 c36:	0e c0       	rjmp	.+28     	; 0xc54 <check_command+0x3e>
 c38:	90 e0       	ldi	r25, 0x00	; 0
		{
			check = TRUE;
			i++;
 c3a:	9f 5f       	subi	r25, 0xFF	; 255
//function to compare the input command with saved commands
STD_Boolean check_command(uint8* command, uint8* strng)
{
	STD_Boolean check;
	uint8 i = 0;
	while (command[i]!='\0')
 c3c:	29 2f       	mov	r18, r25
 c3e:	30 e0       	ldi	r19, 0x00	; 0
 c40:	fd 01       	movw	r30, r26
 c42:	e2 0f       	add	r30, r18
 c44:	f3 1f       	adc	r31, r19
 c46:	40 81       	ld	r20, Z
 c48:	41 11       	cpse	r20, r1
 c4a:	ef cf       	rjmp	.-34     	; 0xc2a <check_command+0x14>
 c4c:	81 e0       	ldi	r24, 0x01	; 1
 c4e:	08 95       	ret
 c50:	81 e0       	ldi	r24, 0x01	; 1
 c52:	08 95       	ret
			check = TRUE;
			i++;
		}
		else
		{
			check = FALSE;
 c54:	80 e0       	ldi	r24, 0x00	; 0
			break;
		}
	}
	return check;
}
 c56:	08 95       	ret

00000c58 <Get_Command>:
//function to get the command value
uint8 Get_Command(uint8* command)
{
 c58:	cf 93       	push	r28
 c5a:	df 93       	push	r29
 c5c:	ec 01       	movw	r28, r24
	uint8 output = 0;
	if (check_command(command,"led1"))
 c5e:	6b ed       	ldi	r22, 0xDB	; 219
 c60:	70 e0       	ldi	r23, 0x00	; 0
 c62:	0e 94 0b 06 	call	0xc16	; 0xc16 <check_command>
 c66:	81 11       	cpse	r24, r1
 c68:	0f c0       	rjmp	.+30     	; 0xc88 <Get_Command+0x30>
	{
		output = 1;
	}
	else if (check_command(command,"led2"))
 c6a:	60 ee       	ldi	r22, 0xE0	; 224
 c6c:	70 e0       	ldi	r23, 0x00	; 0
 c6e:	ce 01       	movw	r24, r28
 c70:	0e 94 0b 06 	call	0xc16	; 0xc16 <check_command>
 c74:	81 11       	cpse	r24, r1
 c76:	0a c0       	rjmp	.+20     	; 0xc8c <Get_Command+0x34>
	{
		output = 2;
	}
	else if (check_command(command,"led3"))
 c78:	65 ee       	ldi	r22, 0xE5	; 229
 c7a:	70 e0       	ldi	r23, 0x00	; 0
 c7c:	ce 01       	movw	r24, r28
 c7e:	0e 94 0b 06 	call	0xc16	; 0xc16 <check_command>
 c82:	81 11       	cpse	r24, r1
 c84:	05 c0       	rjmp	.+10     	; 0xc90 <Get_Command+0x38>
 c86:	05 c0       	rjmp	.+10     	; 0xc92 <Get_Command+0x3a>
uint8 Get_Command(uint8* command)
{
	uint8 output = 0;
	if (check_command(command,"led1"))
	{
		output = 1;
 c88:	81 e0       	ldi	r24, 0x01	; 1
 c8a:	03 c0       	rjmp	.+6      	; 0xc92 <Get_Command+0x3a>
	}
	else if (check_command(command,"led2"))
	{
		output = 2;
 c8c:	82 e0       	ldi	r24, 0x02	; 2
 c8e:	01 c0       	rjmp	.+2      	; 0xc92 <Get_Command+0x3a>
	}
	else if (check_command(command,"led3"))
	{
		output = 3;
 c90:	83 e0       	ldi	r24, 0x03	; 3
	else
	{
		output = 0;
	}
	return output;
 c92:	df 91       	pop	r29
 c94:	cf 91       	pop	r28
 c96:	08 95       	ret

00000c98 <__tablejump2__>:
 c98:	ee 0f       	add	r30, r30
 c9a:	ff 1f       	adc	r31, r31
 c9c:	05 90       	lpm	r0, Z+
 c9e:	f4 91       	lpm	r31, Z
 ca0:	e0 2d       	mov	r30, r0
 ca2:	09 94       	ijmp

00000ca4 <__umulhisi3>:
 ca4:	a2 9f       	mul	r26, r18
 ca6:	b0 01       	movw	r22, r0
 ca8:	b3 9f       	mul	r27, r19
 caa:	c0 01       	movw	r24, r0
 cac:	a3 9f       	mul	r26, r19
 cae:	70 0d       	add	r23, r0
 cb0:	81 1d       	adc	r24, r1
 cb2:	11 24       	eor	r1, r1
 cb4:	91 1d       	adc	r25, r1
 cb6:	b2 9f       	mul	r27, r18
 cb8:	70 0d       	add	r23, r0
 cba:	81 1d       	adc	r24, r1
 cbc:	11 24       	eor	r1, r1
 cbe:	91 1d       	adc	r25, r1
 cc0:	08 95       	ret

00000cc2 <_exit>:
 cc2:	f8 94       	cli

00000cc4 <__stop_program>:
 cc4:	ff cf       	rjmp	.-2      	; 0xcc4 <__stop_program>
